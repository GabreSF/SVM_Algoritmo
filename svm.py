# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lOmgvYfrvQLUEbpTT83GiZKFSRq21bp6
"""

pip install plotly --upgrade

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

"""**Base de Dados Imóveis**

[Fonte](https:/https://www.kaggle.com/arslanali4343/real-estate-dataset)
"""

from google.colab import drive
drive.mount('/content/drive')

base_imoveis = pd.read_csv('/content/Dados_imoveis.csv')

base_imoveis

base_imoveis.describe()

np.unique(base_imoveis['MEDV'], return_counts=True)

"""**Visualização dos dados**"""

grafico = px.scatter_matrix(base_imoveis, dimensions=['RM', 'ZN', 'CRIM'], color = 'MEDV')
grafico.show()

"""**Divisão entra previsores e Classe**"""

x_imove = base_imoveis.iloc[:,1:5 ].values

x_imove

y_imove = base_imoveis.iloc[:, 3]

y_imove

"""**Escalonamento dos Valores**"""

x_imove

x_imove[:,0].min(), x_imove[:,1].min(), x_imove[:,2].min()

x_imove[:,0].max(), x_imove[:,1].max(), x_imove[:,2].max()

from sklearn.preprocessing import StandardScaler
scaler_imove = StandardScaler()
x_imove = scaler_imove.fit_transform(x_imove)

x_imove[:,0].min(), x_imove[:,1].min(), x_imove[:,2].min()

x_imove[:,0].max(), x_imove[:,1].max(), x_imove[:,2].max()

x_imove

"""**Divisão das bases em treinamento e teste**"""

from sklearn.model_selection import train_test_split

x_imove_treinamento, x_imove_teste, y_imove_treinamento, y_imove_teste = train_test_split(x_imove, y_imove, test_size = 0.35, random_state = 0)

x_imove_treinamento.shape

y_imove_treinamento

x_imove_teste.shape, y_imove_teste.shape

"""**Salvandos as variáveis**"""

import pickle

with open('Imoveiss.pkl', mode = 'wb') as f:
  pickle.dump([x_imove_treinamento, y_imove_treinamento, x_imove_teste, y_imove_teste], f)

"""**Algoritmo SVM**"""

from sklearn.svm import SVC

import pickle
with open('Imoveiss.pkl', 'rb') as f:  
  x_imove_treinamento, y_imove_treinamento, x_imove_teste, y_imove_teste = pickle.load(f)

x_imove_treinamento.shape, y_imove_treinamento.shape

x_imove_teste.shape, y_imove_teste.shape

svm_imove = SVC(kernel='rbf', random_state=1, C = 2.0) # 2 -> 4
svm_imove.fit(x_imove_treinamento, y_imove_treinamento)

previsoes = svm_imove.predict(x_imove_teste)
previsoes

y_imove_teste

from sklearn.metrics import accuracy_score, classification_report
accuracy_score(y_imove_teste, previsoes)

from yellowbrick.classifier import ConfusionMatrix
cm = ConfusionMatrix(svm_imove)
cm.fit(x_imove_treinamento, y_imove_treinamento)
cm.score(x_imove_teste, y_imove_teste)

print(classification_report(y_imove_teste, previsoes))